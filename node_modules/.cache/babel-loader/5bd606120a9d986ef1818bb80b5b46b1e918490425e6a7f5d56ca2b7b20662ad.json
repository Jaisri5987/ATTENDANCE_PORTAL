{"ast":null,"code":"const mockapi = false;\nimport employees from './mockauth';\nimport AuthService from '../serviceLayer/authService';\nfunction checkUserInLocalStorage() {\n  return localStorage.getItem('user') ? localStorage.getItem('user') : {};\n}\nconst authStore = {\n  state: {\n    user: checkUserInLocalStorage(),\n    employees\n  },\n  mutations: {\n    setLogin(state, employee) {\n      localStorage.setItem('user', JSON.stringify(employee));\n      state.user = JSON.stringify(employee);\n    },\n    setLogout(state) {\n      localStorage.removeItem('user');\n      state.user = {};\n    }\n  },\n  actions: {\n    AUTH_LOGIN({\n      commit\n    }, {\n      success,\n      fail,\n      data\n    }) {\n      const {\n        email,\n        password\n      } = data;\n      let authemp;\n      if (mockapi) {\n        authemp = employees.findIndex(emp => {\n          return emp.email === email && emp.password == password;\n        });\n        // const {empCode,role}=employees[authemp];\n\n        commit(\"setLogin\", employees[authemp]);\n        success(employees[authemp]);\n      } else {\n        AuthService.authUser({\n          data,\n          success: res => {\n            commit(\"setLogin\", res.data);\n            success(res.data);\n          },\n          fail: err => {\n            fail(err);\n          }\n        });\n      }\n    },\n    AUTH_LOGOUT({\n      commit\n    }) {\n      commit(\"setLogout\");\n    }\n  },\n  getters: {\n    getUser(state) {\n      console.log();\n      return JSON.parse(state.user);\n    }\n  },\n  namespaced: true\n};\nexport default authStore;","map":{"version":3,"names":["mockapi","employees","AuthService","checkUserInLocalStorage","localStorage","getItem","authStore","state","user","mutations","setLogin","employee","setItem","JSON","stringify","setLogout","removeItem","actions","AUTH_LOGIN","commit","success","fail","data","email","password","authemp","findIndex","emp","authUser","res","err","AUTH_LOGOUT","getters","getUser","console","log","parse","namespaced"],"sources":["/Users/jaisri/Downloads/attendance-portal-master/src/store/authStore.js"],"sourcesContent":["const mockapi=false;\nimport employees from './mockauth';\nimport AuthService from '../serviceLayer/authService';\n\n\nfunction checkUserInLocalStorage(){\n    return localStorage.getItem('user')?localStorage.getItem('user'):{};\n}\n\nconst authStore={\n    state:{\n        user:checkUserInLocalStorage(),\n       employees\n    },\n\n    mutations:{\n    setLogin(state,employee)\n    {\n        localStorage.setItem('user',JSON.stringify(employee));\n        state.user=JSON.stringify(employee);\n    },\n    setLogout(state)\n    {\n      localStorage.removeItem('user');\n      state.user={}\n    }\n    },\n    actions:{\n        AUTH_LOGIN({commit},{success,fail,data}){\n            const {email,password}=data;\n            let authemp;\n            if(mockapi){\n                authemp=employees.findIndex((emp)=>{\n                    return emp.email=== email && emp.password==password\n                });\n               // const {empCode,role}=employees[authemp];\n\n                commit(\"setLogin\",employees[authemp]);\n                success(employees[authemp]);    \n            }\n            else{\n                AuthService.authUser({data,\n                    success:(res)=>{\n                        commit(\"setLogin\",res.data);\n                        success(res.data)\n                        \n                    },\n                    fail:(err)=>{\n                        fail(err)\n                    }})\n            }\n          },\n         AUTH_LOGOUT({commit}){\n              commit(\"setLogout\");\n          }\n    },\n    getters:{\n        getUser(state){\n            console.log()\n            return JSON.parse(state.user);\n          },\n    },\n    namespaced:true\n}\n\nexport default authStore;"],"mappings":"AAAA,MAAMA,OAAO,GAAC,KAAK;AACnB,OAAOC,SAAS,MAAM,YAAY;AAClC,OAAOC,WAAW,MAAM,6BAA6B;AAGrD,SAASC,uBAAuB,GAAE;EAC9B,OAAOC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,GAACD,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,GAAC,CAAC,CAAC;AACvE;AAEA,MAAMC,SAAS,GAAC;EACZC,KAAK,EAAC;IACFC,IAAI,EAACL,uBAAuB,EAAE;IAC/BF;EACH,CAAC;EAEDQ,SAAS,EAAC;IACVC,QAAQ,CAACH,KAAK,EAACI,QAAQ,EACvB;MACIP,YAAY,CAACQ,OAAO,CAAC,MAAM,EAACC,IAAI,CAACC,SAAS,CAACH,QAAQ,CAAC,CAAC;MACrDJ,KAAK,CAACC,IAAI,GAACK,IAAI,CAACC,SAAS,CAACH,QAAQ,CAAC;IACvC,CAAC;IACDI,SAAS,CAACR,KAAK,EACf;MACEH,YAAY,CAACY,UAAU,CAAC,MAAM,CAAC;MAC/BT,KAAK,CAACC,IAAI,GAAC,CAAC,CAAC;IACf;EACA,CAAC;EACDS,OAAO,EAAC;IACJC,UAAU,CAAC;MAACC;IAAM,CAAC,EAAC;MAACC,OAAO;MAACC,IAAI;MAACC;IAAI,CAAC,EAAC;MACpC,MAAM;QAACC,KAAK;QAACC;MAAQ,CAAC,GAACF,IAAI;MAC3B,IAAIG,OAAO;MACX,IAAGzB,OAAO,EAAC;QACPyB,OAAO,GAACxB,SAAS,CAACyB,SAAS,CAAEC,GAAG,IAAG;UAC/B,OAAOA,GAAG,CAACJ,KAAK,KAAIA,KAAK,IAAII,GAAG,CAACH,QAAQ,IAAEA,QAAQ;QACvD,CAAC,CAAC;QACH;;QAECL,MAAM,CAAC,UAAU,EAAClB,SAAS,CAACwB,OAAO,CAAC,CAAC;QACrCL,OAAO,CAACnB,SAAS,CAACwB,OAAO,CAAC,CAAC;MAC/B,CAAC,MACG;QACAvB,WAAW,CAAC0B,QAAQ,CAAC;UAACN,IAAI;UACtBF,OAAO,EAAES,GAAG,IAAG;YACXV,MAAM,CAAC,UAAU,EAACU,GAAG,CAACP,IAAI,CAAC;YAC3BF,OAAO,CAACS,GAAG,CAACP,IAAI,CAAC;UAErB,CAAC;UACDD,IAAI,EAAES,GAAG,IAAG;YACRT,IAAI,CAACS,GAAG,CAAC;UACb;QAAC,CAAC,CAAC;MACX;IACF,CAAC;IACFC,WAAW,CAAC;MAACZ;IAAM,CAAC,EAAC;MAChBA,MAAM,CAAC,WAAW,CAAC;IACvB;EACN,CAAC;EACDa,OAAO,EAAC;IACJC,OAAO,CAAC1B,KAAK,EAAC;MACV2B,OAAO,CAACC,GAAG,EAAE;MACb,OAAOtB,IAAI,CAACuB,KAAK,CAAC7B,KAAK,CAACC,IAAI,CAAC;IAC/B;EACN,CAAC;EACD6B,UAAU,EAAC;AACf,CAAC;AAED,eAAe/B,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}