{"ast":null,"code":"import { holidays } from \"@/Data/holidays\";\nexport default {\n  name: 'DatePicker',\n  data() {\n    const now = new Date();\n    const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n    // 15th two months prior\n    const minDate = new Date(today);\n    minDate.setMonth(minDate.getMonth() - 2);\n    minDate.setDate(15);\n    // 15th in two months\n    const maxDate = new Date(today);\n    maxDate.setMonth(maxDate.getMonth() + 2);\n    maxDate.setDate(15);\n    return {\n      date: '',\n      disabledDates: holidays,\n      min: minDate,\n      max: maxDate,\n      value: ''\n    };\n  },\n  props: {\n    required: false\n    // max:{\n    //   type:String,\n    //   default:new Date().toISOString().split('T')[0]\n    // }\n    // max: String\n  },\n\n  computed: {\n    highlightDates(date) {\n      // console.log(date.disabledDates)\n      // console.log(holidays.length)\n      for (let i = 0; i < holidays.length; i++) {\n        const holiday = new Date(holidays[i]);\n        const dates = new Date(date.disabledDates[i]);\n        // console.log(date.disabledDates)\n\n        if (holiday.toDateString() === dates.toDateString()) {\n          // console.log(date.disabledDates[i])\n          // return \"bg-danger text-white\";\n        }\n      }\n      return \"\";\n    }\n  },\n  methods: {\n    dateDisabled(ymd, date) {\n      console.log(date);\n      //  return  holidays.some(holiday => {\n      //     const match = holiday.toDateString() === date.toDateString();\n      //     return match;\n      //   });\n      // const weekday = date.getDay()\n      const day = date.getDate();\n      // Return `true` if the date should be disabled\n      return day === 6 || day === 7;\n    },\n    selectedDate(value) {\n      this.$emit('date-selected', value);\n    }\n  }\n};","map":{"version":3,"names":["holidays","name","data","now","Date","today","getFullYear","getMonth","getDate","minDate","setMonth","setDate","maxDate","date","disabledDates","min","max","value","props","required","computed","highlightDates","i","length","holiday","dates","toDateString","methods","dateDisabled","ymd","console","log","day","selectedDate","$emit"],"sources":["/Users/jaisri/Downloads/attendance-portal-master/src/components/js/DatePicker.js"],"sourcesContent":["import {holidays} from \"@/Data/holidays\";\n\nexport default {\n    name:'DatePicker',\n  data() {\n    const now = new Date()\n    const today = new Date(now.getFullYear(), now.getMonth(), now.getDate())\n    // 15th two months prior\n    const minDate = new Date(today)\n    minDate.setMonth(minDate.getMonth() - 2)\n    minDate.setDate(15)\n    // 15th in two months\n    const maxDate = new Date(today)\n    maxDate.setMonth(maxDate.getMonth() + 2)\n    maxDate.setDate(15)\n    return {\n      date:'',\n      disabledDates: holidays,\n      min: minDate,\n      max: maxDate,\n      value: ''\n    }\n  },\n  props:{\n    required:false,\n    // max:{\n    //   type:String,\n    //   default:new Date().toISOString().split('T')[0]\n    // }\n    // max: String\n  },\n  computed: {\n    highlightDates(date) {\n      // console.log(date.disabledDates)\n      // console.log(holidays.length)\n      for (let i = 0; i < holidays.length; i++) {\n        const holiday = new Date(holidays[i]);\n        const dates=new Date(date.disabledDates[i])\n        // console.log(date.disabledDates)\n       \n        if (holiday.toDateString() === dates.toDateString()) {\n          // console.log(date.disabledDates[i])\n          // return \"bg-danger text-white\";\n        }\n      }\n      return \"\";\n    }\n  },  \n  methods: {\n\n    dateDisabled(ymd, date) {\n      console.log(date  )\n    //  return  holidays.some(holiday => {\n    //     const match = holiday.toDateString() === date.toDateString();\n    //     return match;\n    //   });\n      // const weekday = date.getDay()\n      const day = date.getDate()\n      // Return `true` if the date should be disabled\n      return day === 6 || day === 7\n    },\n    selectedDate(value)\n    {\n      this.$emit('date-selected',value)\n    }\n  },\n  \n};"],"mappings":"AAAA,SAAQA,QAAQ,QAAO,iBAAiB;AAExC,eAAe;EACXC,IAAI,EAAC,YAAY;EACnBC,IAAI,GAAG;IACL,MAAMC,GAAG,GAAG,IAAIC,IAAI,EAAE;IACtB,MAAMC,KAAK,GAAG,IAAID,IAAI,CAACD,GAAG,CAACG,WAAW,EAAE,EAAEH,GAAG,CAACI,QAAQ,EAAE,EAAEJ,GAAG,CAACK,OAAO,EAAE,CAAC;IACxE;IACA,MAAMC,OAAO,GAAG,IAAIL,IAAI,CAACC,KAAK,CAAC;IAC/BI,OAAO,CAACC,QAAQ,CAACD,OAAO,CAACF,QAAQ,EAAE,GAAG,CAAC,CAAC;IACxCE,OAAO,CAACE,OAAO,CAAC,EAAE,CAAC;IACnB;IACA,MAAMC,OAAO,GAAG,IAAIR,IAAI,CAACC,KAAK,CAAC;IAC/BO,OAAO,CAACF,QAAQ,CAACE,OAAO,CAACL,QAAQ,EAAE,GAAG,CAAC,CAAC;IACxCK,OAAO,CAACD,OAAO,CAAC,EAAE,CAAC;IACnB,OAAO;MACLE,IAAI,EAAC,EAAE;MACPC,aAAa,EAAEd,QAAQ;MACvBe,GAAG,EAAEN,OAAO;MACZO,GAAG,EAAEJ,OAAO;MACZK,KAAK,EAAE;IACT,CAAC;EACH,CAAC;EACDC,KAAK,EAAC;IACJC,QAAQ,EAAC;IACT;IACA;IACA;IACA;IACA;EACF,CAAC;;EACDC,QAAQ,EAAE;IACRC,cAAc,CAACR,IAAI,EAAE;MACnB;MACA;MACA,KAAK,IAAIS,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGtB,QAAQ,CAACuB,MAAM,EAAED,CAAC,EAAE,EAAE;QACxC,MAAME,OAAO,GAAG,IAAIpB,IAAI,CAACJ,QAAQ,CAACsB,CAAC,CAAC,CAAC;QACrC,MAAMG,KAAK,GAAC,IAAIrB,IAAI,CAACS,IAAI,CAACC,aAAa,CAACQ,CAAC,CAAC,CAAC;QAC3C;;QAEA,IAAIE,OAAO,CAACE,YAAY,EAAE,KAAKD,KAAK,CAACC,YAAY,EAAE,EAAE;UACnD;UACA;QAAA;MAEJ;MACA,OAAO,EAAE;IACX;EACF,CAAC;EACDC,OAAO,EAAE;IAEPC,YAAY,CAACC,GAAG,EAAEhB,IAAI,EAAE;MACtBiB,OAAO,CAACC,GAAG,CAAClB,IAAI,CAAG;MACrB;MACA;MACA;MACA;MACE;MACA,MAAMmB,GAAG,GAAGnB,IAAI,CAACL,OAAO,EAAE;MAC1B;MACA,OAAOwB,GAAG,KAAK,CAAC,IAAIA,GAAG,KAAK,CAAC;IAC/B,CAAC;IACDC,YAAY,CAAChB,KAAK,EAClB;MACE,IAAI,CAACiB,KAAK,CAAC,eAAe,EAACjB,KAAK,CAAC;IACnC;EACF;AAEF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}